
üß© EJERCICIOS DE JAVA (DE MENOR A MAYOR DIFICULTAD)

------------------------------------------------------------
üü¢ NIVEL B√ÅSICO
------------------------------------------------------------

1. Hola Mundo
Crea un programa que muestre por consola el texto ‚ÄúHola Mundo desde Java‚Äù.

2. Tipos de datos
Declara variables de diferentes tipos (int, double, boolean, char, String) y muestra sus valores.

3. Operaciones aritm√©ticas
Pide al usuario dos n√∫meros y muestra la suma, resta, multiplicaci√≥n, divisi√≥n y m√≥dulo.

4. Conversi√≥n de tipos
Declara una variable double y convi√©rtela a int. Muestra ambos valores por consola.

5. Condicionales simples
Pide la edad del usuario y muestra si es menor de edad, adulto o jubilado.

6. Mayor de tres n√∫meros
Pide tres n√∫meros y muestra cu√°l es el mayor de ellos.

7. Tabla de multiplicar
Pide un n√∫mero del 1 al 10 y muestra su tabla de multiplicar usando un bucle for.

8. Contador de n√∫meros pares e impares
Pide 10 n√∫meros al usuario y muestra cu√°ntos son pares e impares.

9. Suma de n√∫meros hasta N
Pide un n√∫mero entero N y muestra la suma de todos los n√∫meros desde 1 hasta N.

10. Calculadora simple con switch
Pide dos n√∫meros y una operaci√≥n (+, -, *, /) y muestra el resultado seg√∫n el caso.

------------------------------------------------------------
üü° NIVEL INTERMEDIO
------------------------------------------------------------

11. M√©todo de √°rea de un tri√°ngulo
Crea un m√©todo que reciba base y altura y devuelva el √°rea de un tri√°ngulo.

12. M√©todo para contar vocales
Crea un m√©todo que reciba una cadena y devuelva el n√∫mero de vocales.

13. Array de enteros
Declara un array con 10 enteros, as√≠gnales valores y muestra la suma total.

14. Array bidimensional (matriz)
Crea una matriz 3x3 con n√∫meros y muestra la suma de cada fila.

15. Buscar elemento en un array
Crea un array de nombres y pide al usuario uno. Indica si est√° o no en el array.

16. Clase Persona (POO)
Crea una clase Persona con nombre y edad. Crea varios objetos y muestra sus datos.

17. Clase Coche con m√©todos
Crea una clase Coche con atributos marca, modelo y velocidad. Incluye m√©todos acelerar() y frenar().

18. Uso de constructores y toString()
A√±ade constructores y sobrescribe toString() para mostrar los datos de la clase Coche.

19. Herencia: Empleado y Gerente
Crea una clase Empleado con nombre y salario. Crea una clase Gerente que herede de Empleado y tenga un bonus adicional.

20. Polimorfismo con animales
Crea una superclase Animal con el m√©todo hacerSonido() y varias subclases (Perro, Gato) que lo sobrescriban.

21. ArrayList de objetos Persona
Crea un ArrayList que almacene objetos Persona y muestra sus nombres y edades.

22. Buscar persona por nombre en ArrayList
Usa un bucle o un Iterator para buscar si existe una persona con determinado nombre.

23. Uso de HashMap
Crea un HashMap<String, Integer> donde la clave sea el nombre de un producto y el valor su precio. Muestra todos los pares clave-valor.

24. TreeSet con n√∫meros
Crea un TreeSet<Integer> y a√±ade varios n√∫meros desordenados. Muestra el conjunto ordenado autom√°ticamente.

25. Lectura de archivo de texto
Crea un archivo datos.txt con varias l√≠neas y muestra su contenido por consola.

26. Escritura en archivo con BufferedWriter
Pide al usuario varios nombres y escr√≠belos en un archivo nombres.txt.

27. Lectura y conteo de palabras
Lee el contenido de un archivo y muestra cu√°ntas l√≠neas y palabras tiene.

28. Copia de archivo
Copia el contenido de un archivo origen.txt en otro llamado copia.txt.

29. Manejo de excepciones
Crea un programa que pida dos n√∫meros e intente dividirlos. Maneja el error ArithmeticException si el divisor es 0.

30. Excepci√≥n personalizada
Crea una excepci√≥n llamada EdadInvalidaException que se lance si un usuario tiene menos de 0 a√±os.

------------------------------------------------------------
üî¥ NIVEL AVANZADO
------------------------------------------------------------

31. Serializaci√≥n de objetos
Crea una clase Persona y guarda una lista de personas en un archivo binario (personas.dat). Luego recup√©ralas e impr√≠melas.

32. Deserializaci√≥n con validaci√≥n
Lee objetos desde un archivo binario y valida que tengan nombre y edad correctos.

33. Gestor de empleados (POO + ficheros)
Crea un programa con clases Empleado, Gerente y Empresa que permita:
- A√±adir empleados
- Guardarlos en un archivo binario
- Leerlos y mostrarlos

34. Registro de usuarios (colecciones + ficheros)
Simula un registro de usuarios guardando datos (nombre, email, contrase√±a) en un archivo.
Permite a√±adir, buscar y eliminar usuarios.

35. Agenda de contactos (ArrayList + ficheros)
Crea una agenda que guarde contactos (nombre, tel√©fono, correo) en un archivo.
Permite a√±adir, buscar y eliminar contactos.

36. Lectura recursiva de carpetas
Crea un m√©todo recursivo que muestre todos los archivos y carpetas dentro de una ruta.

37. Comparaci√≥n y ordenaci√≥n de objetos
Crea una clase Alumno con nombre y nota. Usa Comparable o Comparator para ordenar por nota descendente.

38. Sistema de notas con HashMap y ficheros
Usa un HashMap<String, Double> para almacenar alumnos y sus notas. Guarda y recupera los datos desde un archivo de texto.

39. Contador de palabras con HashMap
Lee un texto de un archivo y cuenta cu√°ntas veces aparece cada palabra.

40. Proyecto final: Biblioteca digital
Crea un sistema que gestione libros y usuarios.
- Los libros se guardan en una colecci√≥n (ArrayList o HashMap).
- Los usuarios pueden pedir o devolver libros.
- Guarda toda la informaci√≥n en archivos (texto o binarios).
- Maneja errores con excepciones personalizadas.
