==============================
üêç EJERCICIOS DE PYTHON
==============================

Nivel: De b√°sico a avanzado
Enfocados en sintaxis, estructuras, POO, ficheros, m√≥dulos y caracter√≠sticas √∫nicas de Python.

-----------------------------------
üß† NIVEL B√ÅSICO
-----------------------------------

1Ô∏è‚É£ Crea un programa que imprima ‚ÄúHola, Python‚Äù en consola.
2Ô∏è‚É£ Declara variables de diferentes tipos (int, float, str, bool) y muestra sus tipos con `type()`.
3Ô∏è‚É£ Pide al usuario su nombre y edad, y muestra un mensaje formateado usando f-strings.
4Ô∏è‚É£ Crea una lista con 5 frutas y muestra la primera y la √∫ltima usando √≠ndices negativos.
5Ô∏è‚É£ Usa slicing para obtener los tres primeros elementos de una lista.
6Ô∏è‚É£ Crea una tupla con tres colores y desempaqu√©tala en tres variables.
7Ô∏è‚É£ Crea un diccionario con claves ‚Äúnombre‚Äù, ‚Äúedad‚Äù y ‚Äúprofesi√≥n‚Äù, e imprime sus valores.
8Ô∏è‚É£ Usa un set para almacenar nombres sin duplicados.
9Ô∏è‚É£ Usa un bucle `for` para recorrer una lista con `enumerate()` y mostrar el √≠ndice y valor.
10Ô∏è‚É£ Usa un bucle `while` para sumar n√∫meros del 1 al 100.

-----------------------------------
‚öôÔ∏è NIVEL INTERMEDIO (FUNCIONES Y L√ìGICA)
-----------------------------------

11Ô∏è‚É£ Define una funci√≥n que reciba un n√∫mero y devuelva si es primo o no.
12Ô∏è‚É£ Crea una funci√≥n con par√°metros opcionales y por nombre.
13Ô∏è‚É£ Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero.
14Ô∏è‚É£ Usa una funci√≥n `lambda` y `map()` para elevar al cuadrado los n√∫meros de una lista.
15Ô∏è‚É£ Usa una **list comprehension** para obtener todos los m√∫ltiplos de 3 entre 1 y 30.
16Ô∏è‚É£ Crea una funci√≥n que reciba una lista y devuelva otra sin elementos repetidos (usando `set()`).
17Ô∏è‚É£ Crea una funci√≥n que reciba una cadena y devuelva un diccionario con el conteo de cada letra.
18Ô∏è‚É£ Usa `zip()` para combinar dos listas en un diccionario.
19Ô∏è‚É£ Usa `any()` y `all()` para comprobar condiciones sobre listas booleanas.
20Ô∏è‚É£ Crea un generador (`yield`) que devuelva los n√∫meros pares hasta un l√≠mite.

-----------------------------------
üß± NIVEL AVANZADO (POO, FICHEROS Y M√ìDULOS)
-----------------------------------

21Ô∏è‚É£ Crea una clase `Persona` con atributos nombre y edad, y un m√©todo que los muestre.
22Ô∏è‚É£ Agrega un m√©todo `__str__()` a la clase `Persona` para mostrar su informaci√≥n de forma legible.
23Ô∏è‚É£ Crea una clase `Empleado` que herede de `Persona` y a√±ada el atributo ‚Äúsalario‚Äù.
24Ô∏è‚É£ Crea un programa que lea un archivo `datos.txt` e imprima cada l√≠nea en may√∫sculas.
25Ô∏è‚É£ Crea un m√≥dulo `operaciones.py` con funciones `sumar()` y `restar()`, y un archivo principal que las importe.

-----------------------------------
üêç BONUS (CARACTER√çSTICAS PYTHONICAS)
-----------------------------------

26Ô∏è‚É£ Usa una **dict comprehension** para crear un diccionario con los cuadrados de los n√∫meros del 1 al 5.
27Ô∏è‚É£ Crea una funci√≥n que use `*args` y `**kwargs` para imprimir todos los argumentos recibidos.
28Ô∏è‚É£ Usa `try...except` para manejar un posible error de divisi√≥n por cero.
29Ô∏è‚É£ Crea un decorador que mida el tiempo de ejecuci√≥n de una funci√≥n.
30Ô∏è‚É£ Crea un script que detecte si se ejecuta directamente o es importado (`if __name__ == "__main__":`).

-----------------------------------
üèÅ FIN DE LOS EJERCICIOS
-----------------------------------
